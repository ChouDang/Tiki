# name: Node.js CI

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build:

#     runs-on: self-hosted

#     strategy:
#       matrix:
#         node-version: [18.x]
#         service:
#           - "be-tiki/api-gateway"
#           - "be-tiki/identity-service"
#           - "be-tiki/notification-service"
#           - "be-tiki/payment-service"
#           - "be-tiki/product-service"
#           - "tiki-main"

#     steps:
#       - uses: actions/checkout@v4

#       - name: Use Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ matrix.node-version }}
#           cache: ${{ matrix.service == 'tiki-main' && 'yarn' || 'npm' }}
#           cache-dependency-path: |
#             ${{ matrix.service }}/package-lock.json
#             ${{ matrix.service }}/yarn.lock

#       - name: Install dependencies
#         run: |
#           cd ${{ matrix.service }}
#           npm ci

#       - name: Create .env file
#         run: |
#           cd ${{ matrix.service }}
#           touch .env
#           echo "${{ secrets.PROD_ENV }}" > .env

#       - name: Build project
#         run: |
#           cd ${{ matrix.service }}
#           npm run build

name: CI/CD Deploy to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SSH vào EC2 & Pull Code Mới
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USER: ubuntu
          EC2_HOST: ${{ secrets.EC2_IP }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            cd /home/ubuntu/Tiki
            git pull origin main
            docker-compose down
            docker-compose build
            docker-compose up -d
            docker system prune -f
          EOF
